name: "Terraform Apply"

on:
  push:
    paths:
      - "infra/**"
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: "1.6.6"
  TF_WORKING_DIR: "infra/envs/dev"

jobs:
  apply:
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: "Authenticate to GCP via OIDC"
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SA_EMAIL }}
          audience: "https://token.actions.githubusercontent.com"

      - name: "Setup Cloud SDK"
        uses: google-github-actions/setup-gcloud@v2

      - name: "Create terraform.tfvars"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          cp terraform.tfvars.example terraform.tfvars
          sed -i "s/^org_id\s*=.*/org_id = \"${{ secrets.ORG_ID }}\"/" terraform.tfvars
          sed -i "s/^billing_account\s*=.*/billing_account = \"${{ secrets.BILLING_ACCOUNT }}\"/" terraform.tfvars
          # Ensure labels use underscores instead of hyphens
          sed -i 's/cost-center/cost_center/g' terraform.tfvars
          sed -i 's/managed-by/managed_by/g' terraform.tfvars
          # Disable CI service account creation (managed manually)
          sed -i 's/^enable_ci_service_account\s*=.*/enable_ci_service_account = false/' terraform.tfvars

      - name: "Terraform Init"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="prefix=${{ secrets.TF_STATE_PREFIX }}"

      - name: "Terraform Plan"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform plan \
            -var-file="terraform.tfvars" \
            -out=tfplan
        env:
          TF_VAR_org_id: ${{ secrets.ORG_ID }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT }}

      - name: "Terraform Apply"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_org_id: ${{ secrets.ORG_ID }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT }}

      - name: "Get Terraform Outputs"
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform output -json > outputs.json
        env:
          TF_VAR_org_id: ${{ secrets.ORG_ID }}
          TF_VAR_billing_account: ${{ secrets.BILLING_ACCOUNT }}

      - name: "Upload Terraform Outputs"
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs
          path: ${{ env.TF_WORKING_DIR }}/outputs.json

      - name: "Comment Apply Results"
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outputs = JSON.parse(fs.readFileSync('${{ env.TF_WORKING_DIR }}/outputs.json', 'utf8'));
            
            const output = `#### Terraform Apply âœ…
            *Workflow: \`${{ github.workflow }}\`*
            
            **Status:** Infrastructure deployed successfully
            
            <details><summary>Show Outputs</summary>
            
            \`\`\`json
            ${JSON.stringify(outputs, null, 2)}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            // Try to comment on the commit
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: output
              });
            } catch (error) {
              console.log('Could not comment on commit:', error.message);
            }
